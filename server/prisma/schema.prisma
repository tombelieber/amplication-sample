datasource postgres {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt     DateTime         @default(now())
  email         String           @unique
  enrolledRooms RoomEnrollment[]
  firstName     String?
  id            String           @id @default(cuid())
  lastName      String?
  password      String
  phoneNumber   String?          @unique
  roles         String[]
  rooms         Room[]
  updatedAt     DateTime         @updatedAt
  username      String           @unique
}

model Order {
  createdAt  DateTime  @default(now())
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
  discount   Float?
  id         String    @id @default(cuid())
  product    Product?  @relation(fields: [productId], references: [id])
  productId  String?
  quantity   Int?
  totalPrice Int?
  updatedAt  DateTime  @updatedAt
}

model Customer {
  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?
  createdAt DateTime @default(now())
  email     String?
  firstName String?
  id        String   @id @default(cuid())
  lastName  String?
  orders    Order[]
  phone     String?
  updatedAt DateTime @updatedAt
}

model Address {
  address_1 String?
  address_2 String?
  city      String?
  createdAt DateTime   @default(now())
  customers Customer[]
  id        String     @id @default(cuid())
  state     String?
  updatedAt DateTime   @updatedAt
  zip       Int?
}

model Product {
  createdAt   DateTime @default(now())
  description String?
  id          String   @id @default(cuid())
  itemPrice   Float?
  name        String?
  orders      Order[]
  updatedAt   DateTime @updatedAt
}

model Room {
  allowedFrequency EnumRoomAllowedFrequency[]
  billingDate      DateTime
  capcity          Int
  createdAt        DateTime                   @default(now())
  enrollments      RoomEnrollment[]
  id               String                     @id @default(cuid())
  owner            User                       @relation(fields: [ownerId], references: [id])
  ownerId          String
  platformTier     PlatformTier               @relation(fields: [platformTierId], references: [id])
  platformTierId   String
  remainingCapcity Int
  status           EnumRoomStatus
  updatedAt        DateTime                   @updatedAt
}

model RoomEnrollment {
  createdAt      DateTime        @default(now())
  id             String          @id @default(cuid())
  paymentRecords PaymentRecord[]
  room           Room            @relation(fields: [roomId], references: [id])
  roomId         String
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id])
  userId         String
}

model PaymentRecord {
  amount           Float
  createdAt        DateTime                   @default(now())
  frequency        EnumPaymentRecordFrequency
  id               String                     @id @default(cuid())
  paymentGateway   PaymentGateway             @relation(fields: [paymentGatewayId], references: [id])
  paymentGatewayId String
  roomEnrollment   RoomEnrollment             @relation(fields: [roomEnrollmentId], references: [id])
  roomEnrollmentId String
  status           EnumPaymentRecordStatus
  updatedAt        DateTime                   @updatedAt
}

model PaymentGateway {
  createdAt      DateTime        @default(now())
  description    String
  id             String          @id @default(cuid())
  name           String
  paymentRecords PaymentRecord[]
  updatedAt      DateTime        @updatedAt
}

model PlatformProvider {
  createdAt   DateTime       @default(now())
  description String
  id          String         @id @default(cuid())
  name        String
  tiers       PlatformTier[]
  updatedAt   DateTime       @updatedAt
}

model PlatformTier {
  capcity    Int
  createdAt  DateTime         @default(now())
  id         String           @id @default(cuid())
  name       String
  price      Float
  provider   PlatformProvider @relation(fields: [providerId], references: [id])
  providerId String
  rooms      Room[]
  updatedAt  DateTime         @updatedAt
}

enum EnumRoomAllowedFrequency {
  OneOff
  Failed
  Pending
}

enum EnumRoomStatus {
  Public
  Private
  Archive
}

enum EnumPaymentRecordFrequency {
  OneOff
  Monthly
  Yearly
}

enum EnumPaymentRecordStatus {
  Success
  Failed
  Pending
}