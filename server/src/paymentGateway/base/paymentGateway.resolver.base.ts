/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreatePaymentGatewayArgs } from "./CreatePaymentGatewayArgs";
import { UpdatePaymentGatewayArgs } from "./UpdatePaymentGatewayArgs";
import { DeletePaymentGatewayArgs } from "./DeletePaymentGatewayArgs";
import { PaymentGatewayFindManyArgs } from "./PaymentGatewayFindManyArgs";
import { PaymentGatewayFindUniqueArgs } from "./PaymentGatewayFindUniqueArgs";
import { PaymentGateway } from "./PaymentGateway";
import { PaymentRecordFindManyArgs } from "../../paymentRecord/base/PaymentRecordFindManyArgs";
import { PaymentRecord } from "../../paymentRecord/base/PaymentRecord";
import { PaymentGatewayService } from "../paymentGateway.service";

@graphql.Resolver(() => PaymentGateway)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PaymentGatewayResolverBase {
  constructor(
    protected readonly service: PaymentGatewayService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _paymentGatewaysMeta(
    @graphql.Args() args: PaymentGatewayFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [PaymentGateway])
  async paymentGateways(
    @graphql.Args() args: PaymentGatewayFindManyArgs
  ): Promise<PaymentGateway[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => PaymentGateway, { nullable: true })
  async paymentGateway(
    @graphql.Args() args: PaymentGatewayFindUniqueArgs
  ): Promise<PaymentGateway | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentGateway)
  @nestAccessControl.UseRoles({
    resource: "PaymentGateway",
    action: "create",
    possession: "any",
  })
  async createPaymentGateway(
    @graphql.Args() args: CreatePaymentGatewayArgs
  ): Promise<PaymentGateway> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentGateway)
  @nestAccessControl.UseRoles({
    resource: "PaymentGateway",
    action: "update",
    possession: "any",
  })
  async updatePaymentGateway(
    @graphql.Args() args: UpdatePaymentGatewayArgs
  ): Promise<PaymentGateway | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentGateway)
  @nestAccessControl.UseRoles({
    resource: "PaymentGateway",
    action: "delete",
    possession: "any",
  })
  async deletePaymentGateway(
    @graphql.Args() args: DeletePaymentGatewayArgs
  ): Promise<PaymentGateway | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PaymentRecord])
  @nestAccessControl.UseRoles({
    resource: "PaymentRecord",
    action: "read",
    possession: "any",
  })
  async paymentRecords(
    @graphql.Parent() parent: PaymentGateway,
    @graphql.Args() args: PaymentRecordFindManyArgs
  ): Promise<PaymentRecord[]> {
    const results = await this.service.findPaymentRecords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
