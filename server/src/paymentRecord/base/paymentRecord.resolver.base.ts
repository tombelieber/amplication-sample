/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Public } from "../../decorators/public.decorator";
import { CreatePaymentRecordArgs } from "./CreatePaymentRecordArgs";
import { UpdatePaymentRecordArgs } from "./UpdatePaymentRecordArgs";
import { DeletePaymentRecordArgs } from "./DeletePaymentRecordArgs";
import { PaymentRecordFindManyArgs } from "./PaymentRecordFindManyArgs";
import { PaymentRecordFindUniqueArgs } from "./PaymentRecordFindUniqueArgs";
import { PaymentRecord } from "./PaymentRecord";
import { PaymentGateway } from "../../paymentGateway/base/PaymentGateway";
import { RoomEnrollment } from "../../roomEnrollment/base/RoomEnrollment";
import { PaymentRecordService } from "../paymentRecord.service";

@graphql.Resolver(() => PaymentRecord)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PaymentRecordResolverBase {
  constructor(
    protected readonly service: PaymentRecordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PaymentRecord",
    action: "read",
    possession: "any",
  })
  async _paymentRecordsMeta(
    @graphql.Args() args: PaymentRecordFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PaymentRecord])
  @nestAccessControl.UseRoles({
    resource: "PaymentRecord",
    action: "read",
    possession: "any",
  })
  async paymentRecords(
    @graphql.Args() args: PaymentRecordFindManyArgs
  ): Promise<PaymentRecord[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PaymentRecord, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PaymentRecord",
    action: "read",
    possession: "own",
  })
  async paymentRecord(
    @graphql.Args() args: PaymentRecordFindUniqueArgs
  ): Promise<PaymentRecord | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentRecord)
  @nestAccessControl.UseRoles({
    resource: "PaymentRecord",
    action: "create",
    possession: "any",
  })
  async createPaymentRecord(
    @graphql.Args() args: CreatePaymentRecordArgs
  ): Promise<PaymentRecord> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        paymentGateway: {
          connect: args.data.paymentGateway,
        },

        roomEnrollment: {
          connect: args.data.roomEnrollment,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentRecord)
  @nestAccessControl.UseRoles({
    resource: "PaymentRecord",
    action: "update",
    possession: "any",
  })
  async updatePaymentRecord(
    @graphql.Args() args: UpdatePaymentRecordArgs
  ): Promise<PaymentRecord | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          paymentGateway: {
            connect: args.data.paymentGateway,
          },

          roomEnrollment: {
            connect: args.data.roomEnrollment,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentRecord)
  @nestAccessControl.UseRoles({
    resource: "PaymentRecord",
    action: "delete",
    possession: "any",
  })
  async deletePaymentRecord(
    @graphql.Args() args: DeletePaymentRecordArgs
  ): Promise<PaymentRecord | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => PaymentGateway, { nullable: true })
  async paymentGateway(
    @graphql.Parent() parent: PaymentRecord
  ): Promise<PaymentGateway | null> {
    const result = await this.service.getPaymentGateway(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => RoomEnrollment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RoomEnrollment",
    action: "read",
    possession: "any",
  })
  async roomEnrollment(
    @graphql.Parent() parent: PaymentRecord
  ): Promise<RoomEnrollment | null> {
    const result = await this.service.getRoomEnrollment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
