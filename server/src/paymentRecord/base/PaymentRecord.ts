/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  IsDate,
  IsEnum,
  IsString,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumPaymentRecordFrequency } from "./EnumPaymentRecordFrequency";
import { PaymentGateway } from "../../paymentGateway/base/PaymentGateway";
import { RoomEnrollment } from "../../roomEnrollment/base/RoomEnrollment";
import { EnumPaymentRecordStatus } from "./EnumPaymentRecordStatus";
@ObjectType()
class PaymentRecord {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Number)
  amount!: number;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    enum: EnumPaymentRecordFrequency,
  })
  @IsEnum(EnumPaymentRecordFrequency)
  @Field(() => EnumPaymentRecordFrequency, {
    nullable: true,
  })
  frequency?: "OneOff" | "Monthly" | "Yearly";

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: () => PaymentGateway,
  })
  @ValidateNested()
  @Type(() => PaymentGateway)
  paymentGateway?: PaymentGateway;

  @ApiProperty({
    required: true,
    type: () => RoomEnrollment,
  })
  @ValidateNested()
  @Type(() => RoomEnrollment)
  roomEnrollment?: RoomEnrollment;

  @ApiProperty({
    required: true,
    enum: EnumPaymentRecordStatus,
  })
  @IsEnum(EnumPaymentRecordStatus)
  @Field(() => EnumPaymentRecordStatus, {
    nullable: true,
  })
  status?: "Success" | "Failed" | "Pending";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}
export { PaymentRecord };
