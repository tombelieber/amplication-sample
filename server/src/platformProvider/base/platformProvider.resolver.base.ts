/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Public } from "../../decorators/public.decorator";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePlatformProviderArgs } from "./CreatePlatformProviderArgs";
import { UpdatePlatformProviderArgs } from "./UpdatePlatformProviderArgs";
import { DeletePlatformProviderArgs } from "./DeletePlatformProviderArgs";
import { PlatformProviderFindManyArgs } from "./PlatformProviderFindManyArgs";
import { PlatformProviderFindUniqueArgs } from "./PlatformProviderFindUniqueArgs";
import { PlatformProvider } from "./PlatformProvider";
import { PlatformTierFindManyArgs } from "../../platformTier/base/PlatformTierFindManyArgs";
import { PlatformTier } from "../../platformTier/base/PlatformTier";
import { PlatformProviderService } from "../platformProvider.service";

@graphql.Resolver(() => PlatformProvider)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PlatformProviderResolverBase {
  constructor(
    protected readonly service: PlatformProviderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlatformProvider",
    action: "read",
    possession: "any",
  })
  async _platformProvidersMeta(
    @graphql.Args() args: PlatformProviderFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlatformProvider])
  @nestAccessControl.UseRoles({
    resource: "PlatformProvider",
    action: "read",
    possession: "any",
  })
  async platformProviders(
    @graphql.Args() args: PlatformProviderFindManyArgs
  ): Promise<PlatformProvider[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => PlatformProvider, { nullable: true })
  async platformProvider(
    @graphql.Args() args: PlatformProviderFindUniqueArgs
  ): Promise<PlatformProvider | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlatformProvider)
  @nestAccessControl.UseRoles({
    resource: "PlatformProvider",
    action: "create",
    possession: "any",
  })
  async createPlatformProvider(
    @graphql.Args() args: CreatePlatformProviderArgs
  ): Promise<PlatformProvider> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlatformProvider)
  @nestAccessControl.UseRoles({
    resource: "PlatformProvider",
    action: "update",
    possession: "any",
  })
  async updatePlatformProvider(
    @graphql.Args() args: UpdatePlatformProviderArgs
  ): Promise<PlatformProvider | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlatformProvider)
  @nestAccessControl.UseRoles({
    resource: "PlatformProvider",
    action: "delete",
    possession: "any",
  })
  async deletePlatformProvider(
    @graphql.Args() args: DeletePlatformProviderArgs
  ): Promise<PlatformProvider | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => [PlatformTier])
  async tiers(
    @graphql.Parent() parent: PlatformProvider,
    @graphql.Args() args: PlatformTierFindManyArgs
  ): Promise<PlatformTier[]> {
    const results = await this.service.findTiers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
