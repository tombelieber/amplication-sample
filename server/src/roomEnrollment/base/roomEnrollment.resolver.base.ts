/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateRoomEnrollmentArgs } from "./CreateRoomEnrollmentArgs";
import { UpdateRoomEnrollmentArgs } from "./UpdateRoomEnrollmentArgs";
import { DeleteRoomEnrollmentArgs } from "./DeleteRoomEnrollmentArgs";
import { RoomEnrollmentFindManyArgs } from "./RoomEnrollmentFindManyArgs";
import { RoomEnrollmentFindUniqueArgs } from "./RoomEnrollmentFindUniqueArgs";
import { RoomEnrollment } from "./RoomEnrollment";
import { PaymentRecordFindManyArgs } from "../../paymentRecord/base/PaymentRecordFindManyArgs";
import { PaymentRecord } from "../../paymentRecord/base/PaymentRecord";
import { Room } from "../../room/base/Room";
import { User } from "../../user/base/User";
import { RoomEnrollmentService } from "../roomEnrollment.service";

@graphql.Resolver(() => RoomEnrollment)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class RoomEnrollmentResolverBase {
  constructor(
    protected readonly service: RoomEnrollmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RoomEnrollment",
    action: "read",
    possession: "any",
  })
  async _roomEnrollmentsMeta(
    @graphql.Args() args: RoomEnrollmentFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RoomEnrollment])
  @nestAccessControl.UseRoles({
    resource: "RoomEnrollment",
    action: "read",
    possession: "any",
  })
  async roomEnrollments(
    @graphql.Args() args: RoomEnrollmentFindManyArgs
  ): Promise<RoomEnrollment[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RoomEnrollment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RoomEnrollment",
    action: "read",
    possession: "own",
  })
  async roomEnrollment(
    @graphql.Args() args: RoomEnrollmentFindUniqueArgs
  ): Promise<RoomEnrollment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RoomEnrollment)
  @nestAccessControl.UseRoles({
    resource: "RoomEnrollment",
    action: "create",
    possession: "any",
  })
  async createRoomEnrollment(
    @graphql.Args() args: CreateRoomEnrollmentArgs
  ): Promise<RoomEnrollment> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        room: {
          connect: args.data.room,
        },

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RoomEnrollment)
  @nestAccessControl.UseRoles({
    resource: "RoomEnrollment",
    action: "update",
    possession: "any",
  })
  async updateRoomEnrollment(
    @graphql.Args() args: UpdateRoomEnrollmentArgs
  ): Promise<RoomEnrollment | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          room: {
            connect: args.data.room,
          },

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RoomEnrollment)
  @nestAccessControl.UseRoles({
    resource: "RoomEnrollment",
    action: "delete",
    possession: "any",
  })
  async deleteRoomEnrollment(
    @graphql.Args() args: DeleteRoomEnrollmentArgs
  ): Promise<RoomEnrollment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PaymentRecord])
  @nestAccessControl.UseRoles({
    resource: "PaymentRecord",
    action: "read",
    possession: "any",
  })
  async paymentRecords(
    @graphql.Parent() parent: RoomEnrollment,
    @graphql.Args() args: PaymentRecordFindManyArgs
  ): Promise<PaymentRecord[]> {
    const results = await this.service.findPaymentRecords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Room, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Room",
    action: "read",
    possession: "any",
  })
  async room(@graphql.Parent() parent: RoomEnrollment): Promise<Room | null> {
    const result = await this.service.getRoom(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: RoomEnrollment): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
